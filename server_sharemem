#include <windows.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstring>

const int SHM_SIZE = 8192;
const char* SHM_NAME = "Global\\ChatSharedMemory";
const int MAX_ROOMS = 10;
const int MAX_CLIENTS = 10;
const int MAX_NAME_LEN = 32;
const int MAX_MSG_LEN = 256;

struct ChatSharedMemory {
    char room_names[MAX_ROOMS][MAX_NAME_LEN];
    int room_count;
    char client_names[MAX_CLIENTS][MAX_NAME_LEN];
    int client_count;
    char messages[MAX_ROOMS][MAX_MSG_LEN];
    char sender_names[MAX_ROOMS][MAX_NAME_LEN];
    char command[256];
    char command_sender[MAX_NAME_LEN];
    int selected_room;
};

int find_room(ChatSharedMemory* shm, const std::string& room) {
    for (int i = 0; i < shm->room_count; ++i) {
        if (room == shm->room_names[i])
            return i;
    }
    return -1;
}

void create_or_join_room(ChatSharedMemory* shm, const std::string& room_name) {
    int idx = find_room(shm, room_name);
    if (idx == -1 && shm->room_count < MAX_ROOMS) {
        strncpy(shm->room_names[shm->room_count], room_name.c_str(), MAX_NAME_LEN - 1);
        shm->room_names[shm->room_count][MAX_NAME_LEN - 1] = '\0';
        shm->messages[shm->room_count][0] = '\0';
        shm->sender_names[shm->room_count][0] = '\0';
        shm->room_count++;
        idx = shm->room_count - 1;
        std::cout << "Created and joined room '" << room_name << "'." << std::endl;
    } else {
        std::cout << "Joined room '" << room_name << "'." << std::endl;
    }
    shm->selected_room = idx;
}

void process_command(ChatSharedMemory* shm) {
    if (shm->command[0] == '\0') return;

    std::string cmd(shm->command);
    std::string sender(shm->command_sender);

    if (cmd.rfind("set_name:", 0) == 0) {
        std::string name = cmd.substr(9);
        bool exists = false;
        for (int i = 0; i < shm->client_count; ++i)
            if (name == shm->client_names[i]) exists = true;
        if (!exists && shm->client_count < MAX_CLIENTS) {
            strncpy(shm->client_names[shm->client_count++], name.c_str(), MAX_NAME_LEN - 1);
            std::cout << "Client name set: " << name << std::endl;
        }
    }
    else if (cmd.rfind("create_or_join_room:", 0) == 0) {
        std::string room = cmd.substr(20);
        create_or_join_room(shm, room);
    }
    else if (cmd.rfind("send:", 0) == 0) {
        std::string msg = cmd.substr(5);
        int room_index = shm->selected_room;
        if (room_index >= 0 && room_index < shm->room_count) {
            strncpy(shm->messages[room_index], msg.c_str(), MAX_MSG_LEN - 1);
            strncpy(shm->sender_names[room_index], sender.c_str(), MAX_NAME_LEN - 1);
            std::cout << "[" << shm->room_names[room_index] << "] "
                      << sender << ": " << msg << std::endl;
        }
    }

    shm->command[0] = '\0';
}

int main() {
    HANDLE hMapFile = CreateFileMappingA(
        INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, SHM_SIZE, SHM_NAME);

    if (hMapFile == NULL) {
        std::cerr << "Could not create file mapping object (" << GetLastError() << ").\n";
        return 1;
    }

    ChatSharedMemory* shm = (ChatSharedMemory*)MapViewOfFile(
        hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, SHM_SIZE);

    if (shm == NULL) {
        std::cerr << "Could not map view of file (" << GetLastError() << ").\n";
        CloseHandle(hMapFile);
        return 1;
    }

    shm->room_count = 0;
    shm->client_count = 0;
    shm->command[0] = '\0';
    shm->selected_room = -1;

    std::cout << "Server started. Waiting for clients..." << std::endl;

    while (true) {
        process_command(shm);
        Sleep(100);
    }

    UnmapViewOfFile(shm);
    CloseHandle(hMapFile);
    return 0;
}
